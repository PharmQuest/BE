name: CI/CD Pipeline

on:
  push:
    branches: [ main ]  # main 브랜치에 push가 발생할 때 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 저장소 코드 체크아웃
      - uses: actions/checkout@v3

      # 2. JDK 17 설정
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. 환경 변수 설정
      - name: Set Environment Variables
        run: |
          echo "SPRING_PROFILES_ACTIVE=prod" >> $GITHUB_ENV
          echo "GOOGLE_CLOUD_JSON_KEY=${{ secrets.GOOGLE_CLOUD_JSON_KEY }}" >> $GITHUB_ENV

      # 4. application-prod.yml 생성
      - name: Make application-prod.yml
        run: |
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_PROD_YML }}" > ./application-prod.yml
        shell: bash

      # 5. gradlew 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 6. Gradle을 사용하여 프로젝트 빌드
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      # 7. 빌드된 아티팩트 업로드
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: umc7thServer2
          path: build/libs/*.jar

  deploy:
    needs: build  # build 작업이 완료된 후 실행
    runs-on: ubuntu-latest

    steps:
      # 1. 빌드된 아티팩트 다운로드
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: umc7thServer2
          path: build/libs/

      # 2. EC2에 배포
      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          SPRING_PROFILES_ACTIVE: prod
          GOOGLE_CLOUD_JSON_KEY: ${{ secrets.GOOGLE_CLOUD_JSON_KEY }}
        run: |
          # EC2 접근 키 설정
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem

          # JAR 파일 및 Base64 디코딩된 JSON 키 전송
          jar_file=$(find build/libs -name '*.jar' ! -name '*plain.jar' | head -n 1)
          scp -i private_key.pem -o StrictHostKeyChecking=no "$jar_file" $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/umc7thServer2.jar

          echo "$GOOGLE_CLOUD_JSON_KEY" | base64 -d | ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "cat > /home/$EC2_USERNAME/google-cloud-key.json"

          # EC2 서버에서 애플리케이션 실행
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
            export SPRING_PROFILES_ACTIVE=prod
            export GOOGLE_CLOUD_JSON_KEY_PATH=/home/$EC2_USERNAME/google-cloud-key.json
            pgrep java | xargs -r kill -15  # 기존 실행 중인 애플리케이션 종료
            sleep 10
            nohup java -jar /home/$EC2_USERNAME/umc7thServer2.jar > app.log 2>&1 &  # 애플리케이션 실행
          "

          # 민감한 파일 삭제
          rm -f private_key.pem
