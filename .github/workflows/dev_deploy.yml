name: CI/CD Pipeline for Dev Deployment

on:
  push:
    branches: [ main ]  # dev 브랜치에 push가 발생하면 실행

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Repository Checkout
      - uses: actions/checkout@v3  # GitHub 저장소 코드 가져오기

      # 2. Set up JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Set Environment Variables
      - name: Set Environment Variables
        run: |
          echo "SPRING_PROFILES_ACTIVE=prod" >> $GITHUB_ENV
          echo "GOOGLE_CLOUD_JSON_KEY=${{ secrets.GOOGLE_CLOUD_JSON_KEY }}" >> $GITHUB_ENV
        shell: bash

      # 4. Generate application-prod.yml
      - name: Make application-prod.yml
        run: |
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_PROD_YML }}" > ./application-prod.yml
        shell: bash

      # 5. Grant execute permission for Gradlew
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # 6. Build with Gradle
      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      # 7. Upload build artifact
      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: devServerArtifact
          path: build/libs/*.jar

  deploy:
    needs: build  # Build 작업 완료 후 실행
    runs-on: ubuntu-latest

    steps:
      # 1. Download build artifact
      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: devServerArtifact
          path: build/libs/

      # 2. Deploy to EC2
      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          SPRING_PROFILES_ACTIVE: prod  # 프로파일 설정
          GOOGLE_CLOUD_JSON_KEY: ${{ secrets.GOOGLE_CLOUD_JSON_KEY }}  # Base64 JSON Key
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          jar_file=$(find build/libs -name '*.jar' ! -name '*plain.jar' | head -n 1)
          scp -i private_key.pem -o StrictHostKeyChecking=no "$jar_file" $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/devServer.jar
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
            pgrep java | xargs -r kill -15  # 기존 Java 프로세스 종료
            sleep 10
            echo $GOOGLE_CLOUD_JSON_KEY | base64 -d > /home/$EC2_USERNAME/google-key.json  # Base64 디코딩 후 JSON 파일 생성
            export GOOGLE_APPLICATION_CREDENTIALS=/home/$EC2_USERNAME/google-key.json  # GOOGLE_APPLICATION_CREDENTIALS 설정
            nohup java -jar /home/$EC2_USERNAME/devServer.jar > app.log 2>&1 &
          "
          rm -f private_key.pem  # 민감한 정보 삭제
