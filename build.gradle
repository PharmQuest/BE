plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.7'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.pharmquest'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url "https://maven.google.com" }
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	implementation 'mysql:mysql-connector-java:8.0.33'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    implementation 'com.fasterxml.jackson.core:jackson-databind'

	// Spring Boot WebFlux (WebClient 사용)
	implementation 'org.springframework.boot:spring-boot-starter-webflux'

	// Spring Boot DevTools (개발 시 편의성 제공)
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.1.0'

	// Netty (macOS에서 DNS 서버 주소를 처리)
	runtimeOnly 'io.netty:netty-resolver-dns-native-macos:4.1.104.Final:osx-aarch_64'

	// Security (소셜 로그인 관련 의존성)
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	testImplementation 'org.springframework.security:spring-security-test'

	// Jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.12.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.12.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.12.2'

	// OAuth 2.0
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'

	implementation 'com.google.cloud:google-cloud-translate:2.55.0'

	implementation 'org.springframework.boot:spring-boot-starter-mustache'



}

tasks.named('test') {
	useJUnitPlatform()
}

def querydslDir = "src/main/generated"

sourceSets {
	main.java.srcDirs += [ querydslDir ]
}

tasks.withType(JavaCompile) {
	options.annotationProcessorGeneratedSourcesDirectory = file(querydslDir)
}

clean.doLast {
	file(querydslDir).deleteDir()
}